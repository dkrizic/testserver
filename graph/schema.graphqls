# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# type Identity is either User or Group
union Identity = User | Group

type User {
  id: String!
  email: String!
  groups(skip:Int = 0,limit:Int = 20): [Group!]
  assets(skip:Int = 0,limit:Int = 20, permission: PermissionQuery!): [Asset!]
}

type Group {
  id: String!
  name: String!
  users(skip:Int = 0,limit:Int = 20): [User!]
  assets(skip:Int = 0,limit:Int = 20, permission: PermissionQuery!): [Asset!]
}

# enum for read and write permissions
enum Permission {
  READ
  WRITE
}

enum PermissionQuery {
  READ
  WRITE
  ALL
}

type Assignment {
  identity: Identity!
  permission: Permission!
  asset: Asset!
}

type Asset {
  id: ID!
  name: String!
  permissions(skip: Int = 0, limit: Int = 10): [Assignment!]
  files(skip: Int = 0, limit: Int = 10): [File!]
}

type File {
  id: ID!
  name: String!
  asset: Asset!
}

interface TagCategory {
  id: ID!
  label: String!
  staticTags: [StaticTag]!
  valueType: ValueType!
}

type RootTagCategory implements TagCategory {
  id: ID!
  label: String!
  staticTags: [StaticTag]!
  children: [ChildTagCategory]
  valueType: ValueType!
}

type ChildTagCategory implements TagCategory {
  id: ID!
  label: String!
  staticTags: [StaticTag]!
  parent: TagCategory!
  valueType: ValueType!
}

interface StaticTag {
  id: ID!
  label: String!
  category: TagCategory!
  isDeleted: Boolean!
  tagCategory: TagCategory!
}

type RootStaticTag implements StaticTag {
  id: ID!
  label: String!
  category: TagCategory!
  isDeleted: Boolean!
  children: [ChildStaticTag]
  tagCategory: TagCategory!
}

type ChildStaticTag implements StaticTag {
  id: ID!
  label: String!
  category: TagCategory!
  isDeleted: Boolean!
  parent: StaticTag!
  tagCategory: TagCategory!
}

enum ValueType {
  STATIC
  STRING
  NUMERIC
  BOOLEAN
}

type Query {
  asset(id:ID, skip: Int = 0, limit: Int = 10): [Asset!]!
  user(id:ID, skip: Int =0, limit: Int = 10): [User!]!
  group(id:ID, skip: Int = 0, limit: Int = 10): [Group!]!
  identity(skip: Int = 0, limit: Int = 10): [Identity!]!
  tagCategory(id: ID): TagCategory
}


type Mutation {
  createAsset(assetName: String!): Asset!
  addGroup(name: String!): Group!
  addUser(email: String!): User!
  addUsertoGroup(userID: ID!, groupID: ID!): Group!
  removeUserFromGroup(userID: ID!, groupID: ID!): Group!
  assignPermission(identityID: ID!, assetID: ID!, permission: Permission!): Assignment!
  removePermission(identityID: ID!, assetID: ID!): Assignment!
}
