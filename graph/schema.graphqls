# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goModel(model: String, models: [String!]) on OBJECT
  | INPUT_OBJECT
  | SCALAR
  | ENUM
  | INTERFACE
  | UNION

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on INPUT_FIELD_DEFINITION
  | FIELD_DEFINITION

# type Identity is either User or Group
interface Identity {
  id: ID!
  accesses(skip:Int = 0,limit:Int = 20, permission: Permission!): [Access!]
}

type User implements Identity{
  id: ID!
  email: String!
  groups(skip:Int = 0,limit:Int = 20): [Group!]
  accesses(skip:Int = 0,limit:Int = 20, permission: Permission!): [Access!] @goField(forceResolver: true)
}

type Group implements Identity {
  id: ID!
  name: String!
  users(skip:Int = 0,limit:Int = 20): [User!]
  accesses(skip:Int = 0,limit:Int = 20, permission: Permission!): [Access!] @goField(forceResolver: true)
}

# enum for read and write permissions
enum Permission {
  READ
  WRITE
}

type Access {
  identity: Identity!
  asset: Asset!
  permission: Permission!
}

type Asset {
  id: ID!
  name: String!
  permissions(skip: Int = 0, limit: Int = 10): [Access!]
  files(skip: Int = 0, limit: Int = 10): [File!] @goField(forceResolver: true)
  tags(skip: Int = 0, limit: Int = 10): [Tag!] @goField(forceResolver: true)
  # Mobile
}

type File {
  id: ID!
  name: String!
  asset: Asset!
  size: Int!
  mimeType: String!
}

interface TagCategory {
  id: ID!
  name: String!
  parentTagCategory: TagCategory
  childTagCategories(skip: Int = 0, limit: Int = 10): [TagCategory!]
  rootTags(skip: Int = 0, limit: Int = 10): [Tag!]
}

# Unit
type StaticTagCategory implements TagCategory{
  id: ID!
  name: String!
  parentTagCategory: TagCategory @goField(forceResolver: true)
  childTagCategories(skip: Int = 0, limit: Int = 10): [TagCategory!]
  staticTags(skip: Int = 0, limit: Int = 10): [StaticTag!]
  isOpen: Boolean!
  rootTags(skip: Int = 0, limit: Int = 10): [Tag!] @goField(forceResolver: true)
}

type DynamicTagCategory implements TagCategory {
  id: ID!
  name: String!
  parentTagCategory: TagCategory @goField(forceResolver: true)
  childTagCategories(skip: Int = 0, limit: Int = 10): [TagCategory!]
  dynamicTags(skip: Int = 0, limit: Int = 10): [DynamicTag!]
  format: String # "[0-9]{4}-[0-9]{2}-[0-9]{42}" for ISO date 2024-12-24
  rootTags(skip: Int = 0, limit: Int = 10): [Tag!] @goField(forceResolver: true)
}

interface Tag {
  id: ID!
  parentTag: Tag
  childTags(skip: Int = 0, limit: Int = 10): [Tag!]
  tagCategory: TagCategory!
}

# Mobile
type StaticTag implements Tag {
  id: ID!
  name: String!
  tagCategory: StaticTagCategory! @goField(forceResolver: true)
  parentStaticTag: StaticTag
  parentTag: Tag @goField(forceResolver: true)
  childTags(skip: Int = 0, limit: Int = 10): [Tag!] @goField(forceResolver: true)
}

type DynamicTag implements Tag {
  id: ID!
  tagCategory: DynamicTagCategory! @goField(forceResolver: true)
  value: String!
  parentTag: Tag @goField(forceResolver: true)
  childTags(skip: Int = 0, limit: Int = 10): [Tag!] @goField(forceResolver: true)
}

type Query {
  asset(id:ID, skip: Int = 0, limit: Int = 10): [Asset!]!
  user(id:ID, skip: Int =0, limit: Int = 10): [User!]!
  group(id:ID, skip: Int = 0, limit: Int = 10): [Group!]!
  identity(skip: Int = 0, limit: Int = 10): [Identity!]!
  tagCategory(id: ID): TagCategory
  tagCategories(skip: Int = 0, limit: Int = 10): [TagCategory!]
  tag(id: ID): Tag!
}


#type Mutation {
#  createAsset(assetName: String!): Asset!
#  addGroup(name: String!): Group!
#  addUser(email: String!): User!
#  addUsertoGroup(userID: ID!, groupID: ID!): Group!
#  removeUserFromGroup(userID: ID!, groupID: ID!): Group!
#  createAccess(identityID: ID!, assetID: ID!, permission: Permission!): Access!
#  removeAccess(identityID: ID!, assetID: ID!): Access!
#}
